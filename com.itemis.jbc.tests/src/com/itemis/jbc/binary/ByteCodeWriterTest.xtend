/*
 * generated by Xtext 2.11.0
 */
package com.itemis.jbc.binary

import com.itemis.jbc.jbc.ClassFile
import com.itemis.jbc.jbc.ConstantClass
import com.itemis.jbc.jbc.ConstantNameAndType
import com.itemis.jbc.jbc.ConstantUtf8
import com.itemis.jbc.tests.JBCInjectorProvider
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith

import static com.itemis.jbc.binary.ClassFileFactoryAPI.*
import static com.itemis.jbc.binary.TestHelper.*

@RunWith(XtextRunner)
@InjectWith(JBCInjectorProvider)
class ByteCodeWriterTest {

	@Test def classFileMostSimple() {
		assertUnchangedAfterWriteRead(
			classFile(u4(-889275714), u2(0), u2(52), u2(1), constantPool(), u2(2), null, null, u2(0), interfaces(),
				u2(0), fields(), u2(0), methods(), u2(0), attributes()))
	}

	@Test def classFileWithOneConstantPoolEntry() {
		var ConstantClass con;
		assertUnchangedAfterWriteRead(
			classFile(u4(-889275714), u2(0), u2(52), u2(2), constantPool(con = constantClass(u1(7), null)), u2(2),
				con, con, u2(0), interfaces(), u2(0), fields(), u2(0), methods(), u2(0), attributes()))
	}

	@Test def classFileWithOneConstantPoolEntryOfEachType() {
		var ConstantUtf8 utf8
		var ConstantClass class
		var ConstantNameAndType nameAndType
		assertUnchangedAfterWriteRead(
			classFile(u4(-889275714), u2(0), u2(52), u2(19),
				constantPool(utf8 = constantUtf8(u1(1), uString("ab")), constantInteger(u1(3), u4(4)),
					constantFloat(u1(4), u4(5)), constantLong(u1(5), u4(1), u4(2)), constantDouble(u1(6), u4(1), u4(2)),
					class = constantClass(u1(7), utf8), constantString(u1(8), utf8),
					nameAndType = constantNameAndType(u1(12), utf8, utf8), constantFieldRef(u1(9), class, nameAndType),
					constantMethodRef(u1(10), class, nameAndType),
					constantInterfaceMethodRef(u1(11), class, nameAndType),
					constantMethodHandle(u1(15), u1(1), nameAndType), constantMethodType(u1(16), utf8),
					constantInvoceDynamic(u1(18), u2(1), nameAndType), constantModule(u1(19), utf8),
					constantPackage(u1(20), utf8)), u2(2), class, class, u2(0), interfaces(), u2(0), fields(), u2(0),
				methods(), u2(0), attributes()))
	}

	@Test def classFileWithInterfaces() {
		var ConstantUtf8 utf8
		var ConstantClass class1
		var ConstantClass class2
		var ConstantClass class3
		assertUnchangedAfterWriteRead(
			classFile(u4(-889275714), u2(0), u2(52), u2(5),
				constantPool(utf8 = constantUtf8(u1(1), uString("")), class1 = constantClass(u1(7), utf8),
					class2 = constantClass(u1(7), utf8), class3 = constantClass(u1(7), utf8)), u2(2), class1, class2,
				u2(3), interfaces(interfaceInfo(class1), interfaceInfo(class2), interfaceInfo(class3)), u2(0), fields(),
				u2(0), methods(), u2(0), attributes()))
	}

	@Test def classFileWithTwoSimpleFields() {
		var ConstantUtf8 utf8
		assertUnchangedAfterWriteRead(
			classFile(u4(-889275714), u2(0), u2(52), u2(2), constantPool(utf8 = constantUtf8(u1(1), uString(""))),
				u2(2), null, null, u2(0), interfaces(), u2(2),
				fields(fieldInfo(u2(1), utf8, utf8, u2(0), attributes()),
					fieldInfo(u2(4), utf8, utf8, u2(0), attributes())), u2(0), methods(), u2(0), attributes()))
	}

	@Test def classFileWithTwoSimpleMethods() {
		var ConstantUtf8 utf8_1
		var ConstantUtf8 utf8_2
		assertUnchangedAfterWriteRead(
			classFile(u4(-889275714), u2(0), u2(52), u2(3),
				constantPool(utf8_1 = constantUtf8(u1(1), uString("")), utf8_2 = constantUtf8(u1(1), uString(""))),
				u2(2), null, null, u2(0), interfaces(), u2(0), fields(), u2(2),
				methods(methodInfo(u2(1), utf8_1, utf8_2, u2(0), attributes()),
					methodInfo(u2(4), utf8_1, utf8_2, u2(0), attributes())), u2(0), attributes()))
	}

	@Test def classFileWithTwoUnknownAttributes() {
		var ConstantUtf8 utf8_1
		var ConstantUtf8 utf8_2
		assertUnchangedAfterWriteRead(
			classFile(u4(-889275714), u2(0), u2(52), u2(3),
				constantPool(utf8_1 = constantUtf8(u1(1), uString("")), utf8_2 = constantUtf8(u1(1), uString("ab"))),
				u2(2), null, null, u2(0), interfaces(), u2(0), fields(), u2(0), methods(), u2(2),
				attributes(attributeUnknown(utf8_1, u4(4), u1(1), u1(2), u1(3), u1(5)),
					attributeUnknown(utf8_2, u4(2), u1(1), u1(3)))))
	}

	@Test def classFileWithSourceFileAttribute() {
		var ConstantUtf8 utf8
		assertUnchangedAfterWriteRead(
			classFile(u4(-889275714), u2(0), u2(52), u2(2),
				constantPool(utf8 = constantUtf8(u1(1), uString("SourceFile"))), u2(2), null, null, u2(0), interfaces(),
				u2(0), fields(), u2(0), methods(), u2(1), attributes(attributeSourceFile(utf8, u4(2), utf8))))
	}

	@Test def codeLDC() {
		var ConstantUtf8 utf8
		assertUnchangedAfterWriteRead(
			classFile(u4(-889275714), u2(0), u2(52), u2(2), constantPool(utf8 = constantUtf8(u1(1), uString("Code"))),
				u2(2), null, null, u2(0), interfaces(), u2(0), fields(), u2(1),
				methods(
					methodInfo(u2(1), utf8, utf8, u2(1),
						attributes(
							attributeCode(utf8, u4(2), u2(1), u2(3), u4(2), codeTable(ldc(u1(18), utf8)), u2(0),
								exceptionTable(), u2(0), attributes())))), u2(0), attributes()))
	}

	@Test def codeLOOKUPSWITCHNoPaddingNoPairs() {
		assertUnchangedAfterWriteRead(standartClassFileWithCode(12, aaload(u1(50)), aaload(u1(50)), aaload(u1(50)),
			lookupswitch(u1(171), u4(0), u4(0))))
	}

	@Test def codeLOOKUPSWITCHOnePaddingNoPairs() {
		assertUnchangedAfterWriteRead(
			standartClassFileWithCode(12, aaload(u1(50)), aaload(u1(50)), lookupswitch(u1(171), u1(0), u4(0), u4(0))))
	}

	@Test def codeLOOKUPSWITCHTwoPaddingNoPairs() {
		assertUnchangedAfterWriteRead(
			standartClassFileWithCode(12, aaload(u1(50)), lookupswitch(u1(171), u1(0), u1(0), u4(0), u4(0))))
	}

	@Test def codeLOOKUPSWITCHThreePaddingNoPairs() {
		assertUnchangedAfterWriteRead(
			standartClassFileWithCode(12, lookupswitch(u1(171), u1(0), u1(0), u1(0), u4(0), u4(0))))
	}

	@Test def codeLOOKUPSWITCHNoPaddingTwoPairs() {
		assertUnchangedAfterWriteRead(standartClassFileWithCode(28, aaload(u1(50)), aaload(u1(50)), aaload(u1(50)),
			lookupswitch(u1(171), u4(0), u4(2), matchOffsetPair(u4(1), u4(2)), matchOffsetPair(u4(3), u4(4)))))
	}

	@Test def codeTABLESWITCHNoPaddingNoOffset() {
		assertUnchangedAfterWriteRead(standartClassFileWithCode(16, aaload(u1(50)), aaload(u1(50)), aaload(u1(50)),
			tableswitch(u1(170), u4(0), u4(1), u4(0))))
	}

	@Test def codeTABLESWITCHOnePaddingNoOffset() {
		assertUnchangedAfterWriteRead(standartClassFileWithCode(16, aaload(u1(50)), aaload(u1(50)),
			tableswitch(u1(170), u1(0), u4(0), u4(1), u4(0))))
	}

	@Test def codeTABLESWITCHTwoPaddingNoOffset() {
		assertUnchangedAfterWriteRead(
			standartClassFileWithCode(16, aaload(u1(50)), tableswitch(u1(170), u1(0), u1(0), u4(0), u4(1), u4(0))))
	}

	@Test def codeTABLESWITCHThreePaddingNoOffset() {
		assertUnchangedAfterWriteRead(
			standartClassFileWithCode(16, tableswitch(u1(170), u1(0), u1(0), u1(0), u4(0), u4(1), u4(0))))
	}

	@Test def codeTABLESWITCHNoPaddingOneOffset() {
		assertUnchangedAfterWriteRead(standartClassFileWithCode(20, aaload(u1(50)), aaload(u1(50)), aaload(u1(50)),
			tableswitch(u1(170), u4(0), u4(1), u4(1), jumpOffset(u4(3)))))
	}

	@Test def codeTABLESWITCHNoPaddingTwoOffsets() {
		assertUnchangedAfterWriteRead(standartClassFileWithCode(24, aaload(u1(50)), aaload(u1(50)), aaload(u1(50)),
			tableswitch(u1(170), u4(0), u4(1), u4(2), jumpOffset(u4(3)), jumpOffset(u4(4)))))
	}

	@Test def codeGotoOntoNext() {
		val branch = nop(u1(0))
		assertUnchangedAfterWriteRead(standartClassFileWithCode(4, goTo(u1(167), branch), branch))
	}

	@Test def codeGotoOntoNextAfterSomeCode() {
		val branch = nop(u1(0))
		assertUnchangedAfterWriteRead(
			standartClassFileWithCode(7, nop(u1(0)), nop(u1(0)), nop(u1(0)), goTo(u1(167), branch), branch))
	}

	private def assertUnchangedAfterWriteRead(ClassFile originalClassFile) {
		val writtenBytes = writeClassFile(originalClassFile)
		var newClassFile = readClassFile(writtenBytes)
		assertTreeMatches(newClassFile, originalClassFile)
	}

}
