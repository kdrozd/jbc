/*
 * generated by Xtext 2.11.0
 */
package com.itemis.jbc.binary

import com.itemis.jbc.jbc.CodeTableEntry
import com.itemis.jbc.jbc.ConstantClass
import com.itemis.jbc.jbc.ConstantNameAndType
import com.itemis.jbc.jbc.ConstantUtf8
import com.itemis.jbc.tests.JBCInjectorProvider
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith

import static com.itemis.jbc.binary.ClassFileFactoryAPI.*
import static com.itemis.jbc.binary.TestHelper.*
import com.itemis.jbc.jbc.ConstantModule

@RunWith(XtextRunner)
@InjectWith(JBCInjectorProvider)
class ByteCodeReaderTest {

	@Test def classFileMostSimple() {
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0001
			0002 0001 0003
			0000
			0000
			0000
			0000
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(1), constantPool(), u2(2), null, null, u2(0), interfaces(),
				u2(0), fields(), u2(0), methods(), u2(0), attributes()))
	}

	@Test def classFileWithOneConstantPoolEntry() {
		var ConstantClass con;
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0002 07 0001
			0002 0001 0001
			0000
			0000
			0000
			0000
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(2), constantPool(con = constantClass(u1(7), null)), u2(2),
				con, con, u2(0), interfaces(), u2(0), fields(), u2(0), methods(), u2(0), attributes()))
	}

	@Test def constantPoolOneUtf8() {
		assertTreeMatches(readConstantPool(2, '''
			01 0000
		'''), constantPool(constantUtf8(u1(1), uString(""))))
	}

	@Test def constantPoolTwoUtf8() {
		assertTreeMatches(readConstantPool(3, '''
			01 0000
			01 0002 61 62
		'''), constantPool(constantUtf8(u1(1), uString("")), constantUtf8(u1(1), uString("ab"))))
	}

	@Test def constantPoolOneIntegers() {
		assertTreeMatches(readConstantPool(2, '''
			03 00000004
		'''), constantPool(constantInteger(u1(3), u4(4))))
	}

	@Test def constantPoolOneFloat() {
		assertTreeMatches(readConstantPool(2, '''
			04 00000005
		'''), constantPool(constantFloat(u1(4), u4(5))))
	}

	@Test def constantPoolOneLong() {
		assertTreeMatches(readConstantPool(3, '''
			05 00000001 00000002
		'''), constantPool(constantLong(u1(5), u4(1), u4(2))))
	}

	@Test def constantPoolTwoLong() {
		assertTreeMatches(readConstantPool(5, '''
			05 00000001 00000002
			05 00000003 00000004
		'''), constantPool(constantLong(u1(5), u4(1), u4(2)), constantLong(u1(5), u4(3), u4(4))))
	}

	@Test def constantPoolOneDouble() {
		assertTreeMatches(readConstantPool(2, '''
			06 00000001 00000002
		'''), constantPool(constantDouble(u1(6), u4(1), u4(2))))
	}

	@Test def constantPoolTwoDouble() {
		assertTreeMatches(readConstantPool(5, '''
			06 00000001 00000002
			06 00000003 00000004
		'''), constantPool(constantDouble(u1(6), u4(1), u4(2)), constantDouble(u1(6), u4(3), u4(4))))
	}

	@Test def constantPoolOneClass() {
		assertTreeMatches(readConstantPool(2, '''
			07 0001
		'''), constantPool(constantClass(u1(7), null)))
	}

	@Test def constantPoolOneClassAndReferencedUtf8() {
		var ConstantUtf8 utf8
		assertTreeMatches(readConstantPool(3, '''
			01 0000
			07 0001
		'''), constantPool(utf8 = constantUtf8(u1(1), uString("")), constantClass(u1(7), utf8)))
	}

	@Test def constantPoolOneString() {
		assertTreeMatches(readConstantPool(2, '''
			08 0001
		'''), constantPool(constantString(u1(8), null)))
	}

	@Test def constantPoolOneStringAndReferencedUtf8() {
		var ConstantUtf8 utf8
		assertTreeMatches(readConstantPool(3, '''
			01 0000
			08 0001
		'''), constantPool(utf8 = constantUtf8(u1(1), uString("")), constantString(u1(8), utf8)))
	}

	@Test def constantPoolOneFieldRef() {
		assertTreeMatches(readConstantPool(2, '''
			09 0001 0002
		'''), constantPool(constantFieldRef(u1(9), null, null)))
	}

	@Test def constantPoolOneFieldRefAndReferencedEntries() {
		var ConstantUtf8 utf8
		var ConstantClass class
		var ConstantNameAndType nameAndType
		assertTreeMatches(readConstantPool(5, '''
			01 0000
			07 0001
			0C 0001 0001
			09 0002 0003
		'''),
			constantPool(utf8 = constantUtf8(u1(1), uString("")), class = constantClass(u1(7), utf8),
				nameAndType = constantNameAndType(u1(12), utf8, utf8), constantFieldRef(u1(9), class, nameAndType)))
	}

	@Test def constantPoolOneMethodRef() {
		assertTreeMatches(readConstantPool(2, '''
			0A 0001 0002
		'''), constantPool(constantMethodRef(u1(10), null, null)))
	}

	@Test def constantPoolOneMethodRefAndReferencedEntries() {
		var ConstantUtf8 utf8
		var ConstantClass class
		var ConstantNameAndType nameAndType
		assertTreeMatches(readConstantPool(5, '''
			01 0000
			07 0001
			0C 0001 0001
			0A 0002 0003
		'''),
			constantPool(utf8 = constantUtf8(u1(1), uString("")), class = constantClass(u1(7), utf8),
				nameAndType = constantNameAndType(u1(12), utf8, utf8), constantMethodRef(u1(10), class, nameAndType)))
	}

	@Test def constantPoolOneInterfaceMethodRef() {
		assertTreeMatches(readConstantPool(2, '''
			0B 0001 0002
		'''), constantPool(constantInterfaceMethodRef(u1(11), null, null)))
	}

	@Test def constantPoolOneInterfaceMethodRefAndReferencedEntries() {
		var ConstantUtf8 utf8
		var ConstantClass class
		var ConstantNameAndType nameAndType
		assertTreeMatches(readConstantPool(5, '''
			01 0000
			07 0001
			0C 0001 0001
			0B 0002 0003
		'''),
			constantPool(utf8 = constantUtf8(u1(1), uString("")), class = constantClass(u1(7), utf8),
				nameAndType = constantNameAndType(u1(12), utf8, utf8),
				constantInterfaceMethodRef(u1(11), class, nameAndType)))
	}

	@Test def constantPoolOneNameAndType() {
		assertTreeMatches(readConstantPool(2, '''
			0C 0001 0002
		'''), constantPool(constantNameAndType(u1(12), null, null)))
	}

	@Test def constantPoolOneNameAndTypeAndReferencedEntities() {
		var ConstantUtf8 utf8
		assertTreeMatches(readConstantPool(3, '''
			01 0000
			0C 0001 0001
		'''), constantPool(utf8 = constantUtf8(u1(1), uString("")), constantNameAndType(u1(12), utf8, utf8)))
	}

	@Test def constantPoolOneMethodHandle() {
		assertTreeMatches(readConstantPool(2, '''
			0F 01 0002
		'''), constantPool(constantMethodHandle(u1(15), u1(1), null)))
	}

	@Test def constantPoolOneMethodHandleAndReferencedEntities() {
		var ConstantUtf8 utf8
		var ConstantNameAndType nameAndType
		assertTreeMatches(readConstantPool(4, '''
			01 0000
			0C 0001 0001
			0F 01 0002
		'''),
			constantPool(utf8 = constantUtf8(u1(1), uString("")), nameAndType = constantNameAndType(u1(12), utf8, utf8),
				constantMethodHandle(u1(15), u1(1), nameAndType)))
	}

	@Test def constantPoolOneMethodType() {
		assertTreeMatches(readConstantPool(2, '''
			10 0001
		'''), constantPool(constantMethodType(u1(16), null)))
	}

	@Test def constantPoolOneMethodTypeAndReferencedEntities() {
		var ConstantUtf8 utf8
		assertTreeMatches(readConstantPool(3, '''
			01 0000
			10 0001
		'''), constantPool(utf8 = constantUtf8(u1(1), uString("")), constantMethodType(u1(16), utf8)))
	}

	@Test def constantPoolOneInvoceDynamic() {
		assertTreeMatches(readConstantPool(2, '''
			12 0001 0002
		'''), constantPool(constantInvoceDynamic(u1(18), u2(1), null)))
	}

	@Test def constantPoolOneInvoceDynamicAndReferencedEntities() {
		var ConstantUtf8 utf8
		var ConstantNameAndType nameAndType
		assertTreeMatches(readConstantPool(4, '''
			01 0000
			0C 0001 0001
			12 0001 0002
		'''),
			constantPool(utf8 = constantUtf8(u1(1), uString("")), nameAndType = constantNameAndType(u1(12), utf8, utf8),
				constantInvoceDynamic(u1(18), u2(1), nameAndType)))
	}

	@Test def constantPoolOneModule() {
		var ConstantUtf8 utf8
		assertTreeMatches(readConstantPool(3, '''
			01 0000
			13 0001
		'''), constantPool(utf8 = constantUtf8(u1(1), uString("")), constantModule(u1(19), utf8)))

	}

	@Test def constantPoolOnePackage() {
		var ConstantUtf8 utf8
		assertTreeMatches(readConstantPool(3, '''
			01 0000
			14 0001
		'''), constantPool(utf8 = constantUtf8(u1(1), uString("")), constantPackage(u1(20), utf8)))

	}

	@Test def classFileWithOneConstantPoolEntryOfEachType() {
		var ConstantUtf8 utf8
		var ConstantClass class
		var ConstantNameAndType nameAndType
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0013
				01 0002 61 62
				03 00000004
				04 00000005
				05 00000001 00000002
				06 00000001 00000002
				07 0001
				08 0001
				0C 0001 0001
				09 0008 000A
				0A 0008 000A
				0B 0008 000A
				0F 01 000A
				10 0001
				12 0001 000A
				13 0001
				14 0001
			0002 0008 0008
			0000
			0000
			0000
			0000
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(19),
				constantPool(utf8 = constantUtf8(u1(1), uString("ab")), constantInteger(u1(3), u4(4)),
					constantFloat(u1(4), u4(5)), constantLong(u1(5), u4(1), u4(2)), constantDouble(u1(6), u4(1), u4(2)),
					class = constantClass(u1(7), utf8), constantString(u1(8), utf8),
					nameAndType = constantNameAndType(u1(12), utf8, utf8), constantFieldRef(u1(9), class, nameAndType),
					constantMethodRef(u1(10), class, nameAndType),
					constantInterfaceMethodRef(u1(11), class, nameAndType),
					constantMethodHandle(u1(15), u1(1), nameAndType), constantMethodType(u1(16), utf8),
					constantInvoceDynamic(u1(18), u2(1), nameAndType), constantModule(u1(19), utf8),
					constantPackage(u1(20), utf8)), u2(2), class, class, u2(0), interfaces(), u2(0), fields(), u2(0),
				methods(), u2(0), attributes()))
	}

	@Test def classFileWithInterfaces() {
		var ConstantUtf8 utf8
		var ConstantClass class1
		var ConstantClass class2
		var ConstantClass class3
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0005
				01 0000
				07 0001
				07 0001
				07 0001
			0002 0002 0003
			0003
				0002
				0003
				0004
			0000
			0000
			0000
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(5),
				constantPool(utf8 = constantUtf8(u1(1), uString("")), class1 = constantClass(u1(7), utf8),
					class2 = constantClass(u1(7), utf8), class3 = constantClass(u1(7), utf8)), u2(2), class1, class2,
				u2(3), interfaces(interfaceInfo(class1), interfaceInfo(class2), interfaceInfo(class3)), u2(0), fields(),
				u2(0), methods(), u2(0), attributes()))
	}

	@Test def classFileWithTwoSimpleFields() {
		var ConstantUtf8 utf8
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0002
				01 0000
			0002 0001 0003
			0000
			0002
				0001 0001 0001 0000
				0004 0001 0001 0000
			0000
			0000
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(2), constantPool(utf8 = constantUtf8(u1(1), uString(""))),
				u2(2), null, null, u2(0), interfaces(), u2(2),
				fields(fieldInfo(u2(1), utf8, utf8, u2(0), attributes()),
					fieldInfo(u2(4), utf8, utf8, u2(0), attributes())), u2(0), methods(), u2(0), attributes()))
	}

	@Test def classFileWithTwoSimpleMethods() {
		var ConstantUtf8 utf8_1
		var ConstantUtf8 utf8_2
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0003
				01 0000
				01 0000
			0002 0001 0003
			0000
			0000
			0002
				0001 0001 0002 0000
				0004 0001 0002 0000
			0000
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(3),
				constantPool(utf8_1 = constantUtf8(u1(1), uString("")), utf8_2 = constantUtf8(u1(1), uString(""))),
				u2(2), null, null, u2(0), interfaces(), u2(0), fields(), u2(2),
				methods(methodInfo(u2(1), utf8_1, utf8_2, u2(0), attributes()),
					methodInfo(u2(4), utf8_1, utf8_2, u2(0), attributes())), u2(0), attributes()))
	}

	@Test def classFileWithTwoUnknownAttributes() {
		var ConstantUtf8 utf8_1
		var ConstantUtf8 utf8_2
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0003
				01 0000
				01 0002 61 62
			0002 0001 0003
			0000
			0000
			0000
			0002
				0001 00000004 01 02 03 05
				0002 00000002 01 03
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(3),
				constantPool(utf8_1 = constantUtf8(u1(1), uString("")), utf8_2 = constantUtf8(u1(1), uString("ab"))),
				u2(2), null, null, u2(0), interfaces(), u2(0), fields(), u2(0), methods(), u2(2),
				attributes(attributeUnknown(utf8_1, u4(4), u1(1), u1(2), u1(3), u1(5)),
					attributeUnknown(utf8_2, u4(2), u1(1), u1(3)))))
	}

	@Test def classFileWithTwoConstantValueAttribute() {
		var ConstantUtf8 utf8
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0002
				01 000D 43 6F 6E 73 74 61 6E 74 56 61 6C 75 65
			0002 0001 0003
			0000
			0000
			0000
			0001
				0001 00000002 0001
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(2),
				constantPool(utf8 = constantUtf8(u1(1), uString("ConstantValue"))), u2(2), null, null, u2(0),
				interfaces(), u2(0), fields(), u2(0), methods(), u2(1),
				attributes(attributeConstantValue(utf8, u4(2), utf8))))
	}

	@Test def classFileWithFieldWithAttribute() {
		var ConstantUtf8 utf8
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0002
				01 000D 43 6F 6E 73 74 61 6E 74 56 61 6C 75 65
			0002 0001 0003
			0000
			0001
				0001 0001 0001 0001
					0001 00000002 0001
			0000
			0000
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(2),
				constantPool(utf8 = constantUtf8(u1(1), uString("ConstantValue"))), u2(2), null, null, u2(0),
				interfaces(), u2(1),
				fields(fieldInfo(u2(1), utf8, utf8, u2(1), attributes(attributeConstantValue(utf8, u4(2), utf8)))),
				u2(0), methods(), u2(0), attributes()))
	}

	@Test def classFileWithMethodWithAttribute() {
		var ConstantUtf8 utf8
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0002
				01 000D 43 6F 6E 73 74 61 6E 74 56 61 6C 75 65
			0002 0001 0003
			0000
			0000
			0001
				0001 0001 0001 0001
					0001 00000002 0001
			0000
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(2),
				constantPool(utf8 = constantUtf8(u1(1), uString("ConstantValue"))), u2(2), null, null, u2(0),
				interfaces(), u2(0), fields(), u2(1),
				methods(methodInfo(u2(1), utf8, utf8, u2(1), attributes(attributeConstantValue(utf8, u4(2), utf8)))),
				u2(0), attributes()))
	}

	@Test def classFileWithMethodAndCodeAttribute() {
		var ConstantUtf8 utf8
		var CodeTableEntry e0
		var CodeTableEntry e1
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0002
				01 0004 43 6F 64 65
			0002 0001 0003
			0000
			0000
			0001
				0001 0001 0001 0001
					0001 00000002 0001 0003 00000002 00 00 0001 0000 0001 0000 0005 0000
			0000
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(2), constantPool(utf8 = constantUtf8(u1(1), uString("Code"))),
				u2(2), null, null, u2(0), interfaces(), u2(0), fields(), u2(1),
				methods(
					methodInfo(u2(1), utf8, utf8, u2(1),
						attributes(
							attributeCode(utf8, u4(2), u2(1), u2(3), u4(2), codeTable(e0 = nop(u1(0)), e1 = nop(u1(0))),
								u2(1), exceptionTable(exceptionTableEntry(e0, e1, e0, null)), u2(0), attributes())))),
				u2(0), attributes()))
	}

	@Test def classFileWithSourceFileAttribute() {
		var ConstantUtf8 utf8
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0002
				01 000A 53 6F 75 72 63 65 46 69 6C 65
			0002 0001 0003
			0000
			0000
			0000
			0001
				0001 00000002 0001
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(2),
				constantPool(utf8 = constantUtf8(u1(1), uString("SourceFile"))), u2(2), null, null, u2(0), interfaces(),
				u2(0), fields(), u2(0), methods(), u2(1), attributes(attributeSourceFile(utf8, u4(2), utf8))))
	}

	@Test def classFileWithEnclosingMethodAttribute() {
		var ConstantUtf8 extendedClassUtf8
		var ConstantUtf8 enclosingClassUtf8
		var ConstantUtf8 thisClassUtf8
		var ConstantUtf8 enclosingMethod
		var ConstantClass extendedClass
		var ConstantClass enclosingClass
		var ConstantClass thisClass
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0008
				01 000a 44 75 6d 6d 79 43 6c 61 73 73
				01 000a 48 65 6c 6c 6f 57 6f 72 6c 64
				01 0010 48 65 6c 6c 6f 57 6f 72 6c 64 24 31 54 65 73 74
				01 000f 45 6e 63 6c 6f 73 69 6e 67 4d 65 74 68 6f 64
				07 0001
				07 0002
				07 0003
			0020 0007 0005 0000 
			0000
			0000
			0001
				0004 00000004 0006 0000
		'''), classFile(u4(-889275714), u2(0), u2(52), u2(8), constantPool(
			extendedClassUtf8 = constantUtf8(u1(1), uString("DummyClass")),
			enclosingClassUtf8 = constantUtf8(u1(1), uString("HelloWorld")),
			thisClassUtf8 = constantUtf8(u1(1), uString("HelloWorld$1Test")),
			enclosingMethod = constantUtf8(u1(1), uString("EnclosingMethod")),
			extendedClass = constantClass(u1(7), enclosingClassUtf8),
			enclosingClass = constantClass(u1(7), extendedClassUtf8),
			thisClass = constantClass(u1(7), thisClassUtf8)
		), u2(32), thisClass, extendedClass, u2(0), interfaces(), u2(0), fields(), u2(0), methods(), u2(1), attributes(
			attributeEnclosingMethod(enclosingMethod, u4(4), enclosingClass, null)
		)))
	}

	@Test def classFileWithModuleAttribute() {
		var ConstantUtf8 utf8
		var ConstantClass class
		var ConstantModule module
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0004
				01 0006 4D 6F 64 75 6C 65
				07 0001
				13 0001
			0001 0002 0002 0000
			0000
			0000
			0001
				0001 00000008 0003 0000 0000
				0000
				0000
				0000
				0000
				0000
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(4),
				constantPool(utf8 = constantUtf8(u1(1), uString("Module")), class = constantClass(u1(7), utf8),
					module = constantModule(u1(19), utf8)), u2(1), class, class, u2(0), interfaces(), u2(0), fields(),
				u2(0), methods(), u2(1),
				attributes(
					attributeModule(utf8, u4(8), module, u2(0), null, u2(0), #[], u2(0), #[], u2(0), #[], u2(0), #[],
						u2(0), #[]))))
	}

	@Test def codeLDC() {
		var ConstantUtf8 utf8
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0002
				01 0004 43 6F 64 65
			0002 0001 0003
			0000
			0000
			0001
				0001 0001 0001 0001
					0001 00000002 0001 0003 00000002 12 01 0000 0000
			0000
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(2), constantPool(utf8 = constantUtf8(u1(1), uString("Code"))),
				u2(2), null, null, u2(0), interfaces(), u2(0), fields(), u2(1),
				methods(
					methodInfo(u2(1), utf8, utf8, u2(1),
						attributes(
							attributeCode(utf8, u4(2), u2(1), u2(3), u4(2), codeTable(ldc(u1(18), utf8)), u2(0),
								exceptionTable(), u2(0), attributes())))), u2(0), attributes()))
	}

	@Test def codeLOOKUPSWITCHNoPaddingNoPairs() {
		assertTreeMatches(readStandartClassFileWithCode('''32 32 32 ab 00000000 00000000'''),
			standartClassFileWithCode(12, aaload(u1(50)), aaload(u1(50)), aaload(u1(50)),
				lookupswitch(u1(171), u4(0), u4(0))))
	}

	@Test def codeLOOKUPSWITCHOnePaddingNoPairs() {
		assertTreeMatches(readStandartClassFileWithCode('''32 32 ab 00 00000000 00000000'''),
			standartClassFileWithCode(12, aaload(u1(50)), aaload(u1(50)), lookupswitch(u1(171), u1(0), u4(0), u4(0))))
	}

	@Test def codeLOOKUPSWITCHTwoPaddingNoPairs() {
		assertTreeMatches(readStandartClassFileWithCode('''32 ab 00 00 00000000 00000000'''),
			standartClassFileWithCode(12, aaload(u1(50)), lookupswitch(u1(171), u1(0), u1(0), u4(0), u4(0))))
	}

	@Test def codeLOOKUPSWITCHThreePaddingNoPairs() {
		assertTreeMatches(readStandartClassFileWithCode('''ab 00 00 00 00000000 00000000'''),
			standartClassFileWithCode(12, lookupswitch(u1(171), u1(0), u1(0), u1(0), u4(0), u4(0))))
	}

	@Test def codeLOOKUPSWITCHNoPaddingTwoPairs() {
		assertTreeMatches(
			readStandartClassFileWithCode('''32 32 32 ab 00000000 00000002 00000001 00000002 00000003 00000004'''),
			standartClassFileWithCode(28, aaload(u1(50)), aaload(u1(50)), aaload(u1(50)),
				lookupswitch(u1(171), u4(0), u4(2), matchOffsetPair(u4(1), u4(2)), matchOffsetPair(u4(3), u4(4)))))
	}

	@Test def codeTABLESWITCHNoPaddingNoOffset() {
		assertTreeMatches(readStandartClassFileWithCode('''32 32 32 aa 00000000 00000001 00000000'''),
			standartClassFileWithCode(16, aaload(u1(50)), aaload(u1(50)), aaload(u1(50)),
				tableswitch(u1(170), u4(0), u4(1), u4(0))))
	}

	@Test def codeTABLESWITCHOnePaddingNoOffset() {
		assertTreeMatches(readStandartClassFileWithCode('''32 32 aa 00 00000000 00000001 00000000'''),
			standartClassFileWithCode(16, aaload(u1(50)), aaload(u1(50)),
				tableswitch(u1(170), u1(0), u4(0), u4(1), u4(0))))
	}

	@Test def codeTABLESWITCHTwoPaddingNoOffset() {
		assertTreeMatches(readStandartClassFileWithCode('''32 aa 00 00 00000000 00000001 00000000'''),
			standartClassFileWithCode(16, aaload(u1(50)), tableswitch(u1(170), u1(0), u1(0), u4(0), u4(1), u4(0))))
	}

	@Test def codeTABLESWITCHThreePaddingNoOffset() {
		assertTreeMatches(readStandartClassFileWithCode('''aa 00 00 00 00000000 00000001 00000000'''),
			standartClassFileWithCode(16, tableswitch(u1(170), u1(0), u1(0), u1(0), u4(0), u4(1), u4(0))))
	}

	@Test def codeTABLESWITCHNoPaddingOneOffset() {
		assertTreeMatches(readStandartClassFileWithCode('''32 32 32 aa 00000000 00000001 00000001 00000003'''),
			standartClassFileWithCode(20, aaload(u1(50)), aaload(u1(50)), aaload(u1(50)),
				tableswitch(u1(170), u4(0), u4(1), u4(1), jumpOffset(u4(3)))))
	}

	@Test def codeTABLESWITCHNoPaddingTwoOffsets() {
		assertTreeMatches(readStandartClassFileWithCode('''32 32 32 aa 00000000 00000001 00000002 00000003 00000004'''),
			standartClassFileWithCode(24, aaload(u1(50)), aaload(u1(50)), aaload(u1(50)),
				tableswitch(u1(170), u4(0), u4(1), u4(2), jumpOffset(u4(3)), jumpOffset(u4(4)))))
	}

	@Test def codeGotoOntoNext() {
		val branch = nop(u1(0))
		assertTreeMatches(readStandartClassFileWithCode('''a7 0003 00'''),
			standartClassFileWithCode(4, goTo(u1(167), branch), branch))
	}

	@Test def codeGotoOntoNextAfterSomeCode() {
		val branch = nop(u1(0))
		assertTreeMatches(readStandartClassFileWithCode('''00 00 00 a7 0003 00'''),
			standartClassFileWithCode(7, nop(u1(0)), nop(u1(0)), nop(u1(0)), goTo(u1(167), branch), branch))
	}

	@Test def classFileWithLineNumberTableAttribute() {
		var ConstantUtf8 utf8
		assertTreeMatches(readClassFile('''
			cafebabe 0000 0034
			0002
				01 000F 4C 69 6E 65 4E 75 6D 62 65 72 54 61 62 6C 65
			0002 0001 0003
			0000
			0000
			0000
			0001
				0001 00000002 0000
		'''),
			classFile(u4(-889275714), u2(0), u2(52), u2(2),
				constantPool(utf8 = constantUtf8(u1(1), uString("LineNumberTable"))), u2(2), null, null, u2(0),
				interfaces(), u2(0), fields(), u2(0), methods(), u2(1),
				attributes(attributeLineNumberTable(utf8, u4(2), u2(0)))))
	}

}
