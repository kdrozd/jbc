/*
 * generated by Xtext 2.11.0
 */
package com.itemis.jbc.generator

import com.google.inject.Inject
import com.itemis.jbc.jbc.ClassFile
import com.itemis.jbc.jbc.CodeTableEntry
import com.itemis.jbc.tests.JBCInjectorProvider
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith

import static com.itemis.jbc.binary.ClassFileFactoryAPI.*
import static org.junit.Assert.*

import static extension com.itemis.jbc.generator.JBCCodeTemplates.*

@RunWith(XtextRunner)
@InjectWith(JBCInjectorProvider)
class JBCCodeTemplatesTest {

	@Inject extension ParseHelper<ClassFile> parseClass

	@Test def classFileMostSimple() {
		'''
			ClassFile {
				CAFEBABE 0001 0002 0001 ConstantPool {
				}
				0001 0000 0000 0000 Interfaces {
				}
				0000 Fields {
				}
				0000 Methods {
				}
				0000 Attributes {
				}
			}
		'''.assertUnchanged
	}

	@Test def constanntPoolWithSimpleUtf8() {
		assertEquals('''
			ConstantPool {
				utf8 01 ""
			}
		'''.toString, code(constantPool(constantUtf8(u1(1), uString("")))))
	}

	@Test def constanntPoolWithLongUtf8() {
		assertEquals('''
			ConstantPool {
				utf8 01 "ConstantValue"
			}
		'''.toString, code(constantPool(constantUtf8(u1(1), uString("ConstantValue")))))
	}

	@Test def constanntPoolWithInteger() {
		assertEquals('''
			ConstantPool {
				integer 02 00000001
			}
		'''.toString, code(constantPool(constantInteger(u1(2), u4(1)))))
	}

	@Test def constanntPoolWithFloat() {
		assertEquals('''
			ConstantPool {
				float 03 00000001
			}
		'''.toString, code(constantPool(constantFloat(u1(3), u4(1)))))
	}

	@Test def constanntPoolWithLong() {
		assertEquals('''
			ConstantPool {
				long 05 00000001 00000002
			}
		'''.toString, code(constantPool(constantLong(u1(5), u4(1), u4(2)))))
	}

	@Test def constanntPoolWithDouble() {
		assertEquals('''
			ConstantPool {
				double 06 00000001 00000002
			}
		'''.toString, code(constantPool(constantDouble(u1(6), u4(1), u4(2)))))
	}

	// TODO write tests with references
	@Test def constanntPoolWithClass() {
		assertEquals('''
			ConstantPool {
				class 06 0000
			}
		'''.toString, code(constantPool(constantClass(u1(6), null))))
	}

	@Test def constanntPoolWithString() {
		assertEquals('''
			ConstantPool {
				string 06 0000
			}
		'''.toString, code(constantPool(constantString(u1(6), null))))
	}

	@Test def constanntPoolWithFieldRef() {
		assertEquals('''
			ConstantPool {
				fieldRef 09 0000 0000
			}
		'''.toString, code(constantPool(constantFieldRef(u1(9), null, null))))
	}

	@Test def constanntPoolWithMethodRef() {
		assertEquals('''
			ConstantPool {
				methodRef 0A 0000 0000
			}
		'''.toString, code(constantPool(constantMethodRef(u1(10), null, null))))
	}

	@Test def constanntPoolWithInterfaceMethodRef() {
		assertEquals('''
			ConstantPool {
				interfaceMethodRef 0B 0000 0000
			}
		'''.toString, code(constantPool(constantInterfaceMethodRef(u1(11), null, null))))
	}

	@Test def constanntPoolWithNameAndType() {
		assertEquals('''
			ConstantPool {
				nameAndType 0C 0000 0000
			}
		'''.toString, code(constantPool(constantNameAndType(u1(12), null, null))))
	}

	@Test def constanntPoolWithMethodHandle() {
		assertEquals('''
			ConstantPool {
				methodHandle 0F 01 0000
			}
		'''.toString, code(constantPool(constantMethodHandle(u1(15), u1(1), null))))
	}

	@Test def constanntPoolWithMethodType() {
		assertEquals('''
			ConstantPool {
				methodType 10 0000
			}
		'''.toString, code(constantPool(constantMethodType(u1(16), null))))
	}

	@Test def constanntPoolWithInvoceDynamic() {
		assertEquals('''
			ConstantPool {
				invoceDynamic 12 0003 0000
			}
		'''.toString, code(constantPool(constantInvoceDynamic(u1(18), u2(3), null))))
	}

	@Test def constanntPoolWithModule() {
		assertEquals('''
			ConstantPool {
				module 13 0000
			}
		'''.toString, code(constantPool(constantModule(u1(19), null))))
	}

	@Test def constanntPoolWithPackage() {
		assertEquals('''
			ConstantPool {
				package 14 0000
			}
		'''.toString, code(constantPool(constantPackage(u1(20), null))))
	}

	@Test def classFileWithAllConstantPoolEntries() {
		'''
			ClassFile {
				CAFEBABE 0001 0002 0011 ConstantPool {
					utf8 01 ""
					integer 02 00000002
					float 03 00000001
					long 05 00000001 00000002
					double 06 00000001 00000002
					class 07 0001
					string 08 0001
					nameAndType 0C 0001 0001
					fieldRef 09 0008 000A
					methodRef 0A 0008 000A
					interfaceMethodRef 0B 0008 000A
					methodHandle 0F 01 000A
					methodType 10 0001
					invoceDynamic 12 0001 000A
					module 13 0001
					package 14 0001
				}
				0001 0008 0008 0000 Interfaces {
				}
				0000 Fields {
				}
				0000 Methods {
				}
				0000 Attributes {
				}
			}
		'''.assertUnchanged
	}

	@Test def classFileWithInterfaces() {
		'''
			ClassFile {
				CAFEBABE 0001 0002 0005 ConstantPool {
					utf8 01 ""
					class 07 0001
					class 07 0001
					class 07 0001
				}
				0001 0000 0000 0003 Interfaces {
					0002
					0003
					0004
				}
				0000 Fields {
				}
				0000 Methods {
				}
				0000 Attributes {
				}
			}
		'''.assertUnchanged
	}

	@Test def simpleField() {
		assertEquals('''
			field 0001 0000 0000 0000 Attributes {
			}
		'''.toString, code(fieldInfo(u2(1), null, null, u2(0), attributes())))
	}

	@Test def classFileWithTwoFields() {
		'''
			ClassFile {
				CAFEBABE 0001 0002 0002 ConstantPool {
					utf8 01 ""
				}
				0001 0000 0000 0000 Interfaces {
				}
				0002 Fields {
					field 0001 0001 0001 0000 Attributes {
					}
					field 0002 0001 0001 0000 Attributes {
					}
				}
				0000 Methods {
				}
				0000 Attributes {
				}
			}
		'''.assertUnchanged
	}

	@Test def simpleMethod() {
		assertEquals('''
			method 0001 0000 0000 0000 Attributes {
			}
		'''.toString, code(methodInfo(u2(1), null, null, u2(0), attributes())))
	}

	@Test def classFileWithTwoMethods() {
		'''
			ClassFile {
				CAFEBABE 0001 0002 0002 ConstantPool {
					utf8 01 ""
				}
				0001 0000 0000 0000 Interfaces {
				}
				0000 Fields {
				}
				0002 Methods {
					method 0001 0001 0001 0000 Attributes {
					}
					method 0002 0001 0001 0000 Attributes {
					}
				}
				0000 Attributes {
				}
			}
		'''.assertUnchanged
	}

	@Test def attributeUnknownSimple() {
		assertEquals('''
			Attributes {
				unknown 0000 00000000 Info { }
			}
		'''.toString, code(attributes(attributeUnknown(null, u4(0)))))
	}

	@Test def attributeUnknownComplex() {
		assertEquals('''
			Attributes {
				unknown 0000 00000004 Info { 01 02 03 04 }
			}
		'''.toString, code(attributes(attributeUnknown(null, u4(4), u1(1), u1(2), u1(3), u1(4)))))
	}

	@Test def classFileWithTwoUnknownAttributes() {
		'''
			ClassFile {
				CAFEBABE 0001 0002 0001 ConstantPool {
				}
				0001 0000 0000 0000 Interfaces {
				}
				0000 Fields {
				}
				0000 Methods {
				}
				0002 Attributes {
					unknown 0000 00000000 Info { }
					unknown 0000 00000000 Info { }
				}
			}
		'''.assertUnchanged
	}

	@Test def classFileWithAttributeModule() {
		'''
			ClassFile {
				CAFEBABE 0001 0002 0003 ConstantPool {
					utf8 01 "Module"
					class 07 0001
				}
				0001 0002 0002 0000 Interfaces {
				}
				0000 Fields {
				}
				0000 Methods {
				}
				0001 Attributes {
					module 0001 00000008 0000 0000 0000
						0000 Requires {
						}
						0000 Exports {
						}
						0000 Opens {
						}
						0000 Uses {
						}
						0000 Provides {
						}
				}
			}
		'''.assertUnchanged
	}

	@Test def attributeConstantValue() {
		assertEquals('''
			Attributes {
				constantValue 0000 00000002 0000
			}
		'''.toString, code(attributes(attributeConstantValue(null, u4(2), null))))
	}

	@Test def attributeCode() {
		assertEquals('''
			Attributes {
				code 0000 00000002 0003 0004 00000002 Code {
					nop 00
					nop 00
				} 0000 ExceptionTable {
				} 0000 Attributes {
				}
			}
		'''.toString,
			code(
				attributes(
					attributeCode(null, u4(2), u2(3), u2(4), u4(2), codeTable(nop(u1(0)), nop(u1(0))), u2(0),
						exceptionTable(), u2(0), attributes()))))
	}

	@Test def attributeCodeWithExceptionTableEntries() {
		var CodeTableEntry e0
		var CodeTableEntry e1
		assertEquals('''
			Attributes {
				code 0000 00000002 0003 0004 00000002 Code {
					nop 00
					nop 00
				} 0002 ExceptionTable {
					entry 0000 0001 0000 0000
					entry 0000 0001 0001 0000
				} 0000 Attributes {
				}
			}
		'''.toString,
			code(
				attributes(
					attributeCode(null, u4(2), u2(3), u2(4), u4(2), codeTable(e0 = nop(u1(0)), e1 = nop(u1(0))), u2(2),
						exceptionTable(exceptionTableEntry(e0, e1, e0, null),
							exceptionTableEntry(e0, e1, e1, null)), u2(0), attributes()))))
	}

	@Test def attributeCodeWithAttribute() {
		assertEquals('''
			Attributes {
				code 0000 00000002 0003 0004 00000002 Code {
					nop 00
					nop 00
				} 0000 ExceptionTable {
				} 0001 Attributes {
					constantValue 0000 00000002 0000
				}
			}
		'''.toString,
			code(
				attributes(
					attributeCode(null, u4(2), u2(3), u2(4), u4(2), codeTable(nop(u1(0)), nop(u1(0))), u2(0),
						exceptionTable(), u2(1), attributes(attributeConstantValue(null, u4(2), null))))))
	}

	@Test def attributeSourceFile() {
		assertEquals('''
			Attributes {
				sourceFile 0000 00000002 0000
			}
		'''.toString, code(attributes(attributeSourceFile(null, u4(2), null))))
	}

	@Test def attributeLineNumberTable() {
		assertEquals('''
			Attributes {
				lineNumberTable 0000 00000002 0000 Table {
				}
			}
		'''.toString, code(attributes(attributeLineNumberTable(null, u4(2), u2(0)))))
	}

	@Test def attributeEnclosingMethod() {
		assertEquals('''
			Attributes {
				enclosingMethod 0000 0000000A 0000 0000
			}
		'''.toString, code(attributes(attributeEnclosingMethod(null, u4(10), null, null))))
	}

	private def assertUnchanged(CharSequence input) {
		assertEquals(input.toString, parse(input).code.toString)
	}

}
